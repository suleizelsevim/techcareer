"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// http://localhost:1111/daily/list
console.info("server.js Server 1111 portunda ayaÄŸa kalktÄ±");
// Bitirme Projesi
// username
// password
// email
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Import
// Import Express (Express:  Node.js iÃ§in esnek bir web uygulama Ã§atÄ±sÄ±nÄ± inÅŸa eder)
// Bu modÃ¼llerle beraber HTTP istekleri(request) iÅŸleyecek ve istemciye(server) yanÄ±t dÃ¶necektir.
// DÄ°KKAT: index.js  require("express") kullanÄ±lÄ±r 
// DÄ°KKAT: index.ts  import("express") kullanÄ±lÄ±r.
// Express Import
const express = require("express");
// Mongoose Import
const mongoose = require("mongoose");
// CSRF Import
const csrf = require("csurf");
const cookieParser = require("cookie-parser");
// Winston: Hata bilgilerini ve bilgi loglarÄ±nÄ± dÃ¼zgÃ¼n ve MORGAN'A gÃ¶re daha geliÅŸmiÅŸtir.
const winston = require("winston"); // Winston logger'Ä± ekle
// Helmet Import
const helmet = require("helmet");
// Swagger UI
// const swaggerJsDoc = require("swagger-jsdoc");
// const swaggerUi = require("swagger-ui-express");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// bodyParser Import
const bodyParser = require("body-parser");
// App Import
const app = express();
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Winston logger yapÄ±landÄ±rmasÄ±
const logger = winston.createLogger({
    level: "info",
    format: winston.format.json(),
    transports: [
        new winston.transports.File({
            filename: "winston_error.log",
            level: "error",
        }),
        new winston.transports.File({ filename: "winston_combined.log" }),
    ],
});
if (process.env.NODE_ENV !== "production") {
    logger.add(new winston.transports.Console({
        format: winston.format.simple(),
    }));
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Mongo DB BaÄŸlantÄ±sÄ±
// username:  hamitmizrak
// password:  <password>
// mongodb+srv://hamitmizrak:<password>@offlinenodejscluster.l3itd.mongodb.net/?retryWrites=true&w=majority&appName=OfflineNodejsCluster
/*
mongosh

use mydb  // VeritabanÄ±nÄ±zÄ± kullanÄ±n
db.getUsers()

VEYA

use admin
db.getUsers()

db.createUser({
  user: "blogAdmin",
  pwd: "BlogPass123",
  roles: [
    { role: "readWrite", db: "blogDB" } // blogDB Ã¼zerinde okuma ve yazma yetkisi
  ]
})


 */
// Localhostta MongoDB yÃ¼klÃ¼yse)
// Bu proje iÃ§in docker-compose Ã¼zerinden 27017 porta sahip mongodb kurdum
const dotenv_1 = __importDefault(require("dotenv"));
dotenv_1.default.config();
// 1.YOL (LOCALHOST)
// .env dosyasÄ±ndaki bilgilerden baÄŸlantÄ± URL'si oluÅŸturuluyor
const databaseLocalUrl = process.env.MONGO_USERNAME && process.env.MONGO_PASSWORD
    ? `mongodb://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@127.0.0.1:${process.env.MONGO_PORT}/Cluster0`
    : "mongodb://ssevim20:Mongodbsifrem123.@127.0.0.1:27017/Cluster0";
// 2.YOL (LOCALHOST)
const databaseDockerUrl = "mongodb://localhost:27017/blogDB";
// MongoDB Cloud (username,password)
// 3.YOL (CLOUD)
const databaseCloudUrl = "mongodb+srv://ssevim20:Mongodbsifrem123.@cluster0.fz9n1pb.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";
// 4.YOL (.dotenv)
require("dotenv").config();
// Localhostta MongoDB yÃ¼klÃ¼yse)
const databaseCloudUrlDotEnv = `mongodb+srv://${process.env.MONGO_USERNAME}:${process.env.MONGO_PASSWORD}@cluster0.fz9n1pb.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`;
// Local ve Cloud
const dataUrl = [
    databaseLocalUrl,
    databaseCloudUrl,
    databaseCloudUrlDotEnv,
];
// Connect
// 1.YOL
//mongoose.connect(`${dataUrl[1]}`).then().catch();
// 2.YOL
//mongoose.connect(`${databaseCloudUrl}`, {useNewUrlParser:true, useUnifiedTopology:true}) // Eski MongoDB sÃ¼rÃ¼mleride
mongoose
    // .connect(`${databaseDockerUrl}`)
    .connect(`${databaseDockerUrl}`)
    .then(() => {
    console.log("Mongo DB BaÅŸarÄ±yla YÃ¼klendi");
})
    .catch((err) => {
    console.error("Mongo DB BaÄŸlantÄ± HatasÄ±", err);
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MIDDLEWARE
// Middleware'leri dahil et
// app.use(bodyParser.urlencoded({ extended: true }));
// Express.js uygulamalarÄ±ndaki middleware'dir. Gelen isteklerin body(gÃ¶vde) kÄ±smÄ±nÄ± analiz ederek, form verilerini ve JSON verilerine eriÅŸebilir hale getirir.
// urlencoded: Burada gelen istek gÃ¶vdelerini URL'ye kodlanmÄ±i form verilerini iÅŸlemeye yarar.
// extended: true: Gelen veriler iÃ§im querystring(qs) adlÄ± kÃ¼taphane kullanÄ±lÄ±r. Ve bunun sayesinde karmaÅŸÄ±k nesleride ayrÄ±ÅŸtÄ±rabilir.
// URL' kodlanmÄ±ÅŸ (x-www-form-urlencoded) biÃ§imde gÃ¶nderir. Bu middleware bu tÃ¼r verileri ayrÄ±ÅŸtruu ve request.body nesnesine ekler.
// http://localhost:1111?name=Hamit&surname=MÄ±zrak
/*
 {
name:"Hamit",
surname:"MÄ±zrak"
}
 */
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
// app.use(bodyParser.urlencoded({ extended: true }));
// Bu middleware gelen HTTP isteklerinin gÃ¶vdesindeki JSIN verilerini ayrÄ±ÅŸtÄ±rÄ±r.
// Sunucusunun JSON formatÄ±ndan gelen GET,POST,DELETE,PUT gibi istekelrin anlamasÄ±nÄ± saÄŸlar.
// Veriler analiz edildikten sonra ,ayrÄ±ÅŸmaztÄ±rÄ±lmÄ±ÅŸ iÃ§erik request.body nesneini ekler
// app.use(cookieParser());
// HTTP istekelrinden gelen cooki'leri(Ã§erez) ayrÄ±ÅŸtÄ±ran bir middleware'dir.
// Bu Ã§erezler request.cookise adlÄ± nesneye ekler.
app.use(cookieParser());
// CSRF Middleware
// CSRF(Cross-Site Request Forgery) saldÄ±rÄ±larÄ±na karÅŸÄ± gÃ¼venliÄŸi saÄŸlar.
// CSRF tokenlarÄ±nÄ± Ã§erezler araÃ§Ä±lÄ±ÄŸyla gÃ¶nderilir.
const csrfProtection = csrf({ cookie: true });
// Express iÃ§in Log
const morgan = require("morgan");
// Morgan AktifleÅŸtirmek
// Morgan'Ä± Express.js uygulamasÄ±nda kullanalÄ±m.
//app.use(morgan('dev')); //dev: kÄ±sa ve renkli loglar gÃ¶ster
app.use(morgan("combined")); //dev: uzun ve renkli loglar gÃ¶ster
// compression:
// npm install compression
// Gzip : Verilerin sÄ±kÄ±ÅŸtÄ±rÄ±lmasÄ±yla performansÄ± artÄ±rmak
// ve aÄŸ Ã¼zerinde sayfaya daha hÄ±zlÄ± eriÅŸimi saÄŸlar
// TÃ¼m Http cevaplarÄ±nÄ± sÄ±kÄ±ÅŸtÄ±rarak gÃ¶nderilmesini saÄŸlar.
// const compression = require('compression');
// app.use(compression);
// Rate Limiting (Ä°stek SÄ±nÄ±rlamasÄ±nÄ±):
// npm install express-rate-limit
// DDoS saldÄ±rlarÄ±na karÅŸÄ± korumayÄ± saÄŸlamak ve sistem performansÄ±nÄ± artÄ±rmak iÃ§indir.
// Gelen istekleri sÄ±nÄ±rlayabiliriz.
// Her 15 dakika iÃ§inde en fazla 100 istek atÄ±labilinir.
const rateLimit = require("express-rate-limit");
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 dakika
    max: 100, // buy sÃ¼re zarfÄ±nda en fazla bu kadar isterk atabilirsiniz.
    message: "Ä°stek sayÄ±sÄ± fazla yapÄ±ldÄ±, lÃ¼tfen biraz sonra tekrar deneyiniz",
});
app.use("/blog/", limiter);
app.use("/register/", limiter);
// CORS
// npm install cors
// CORS (Cross-Origin Resource Sharing)
// EÄŸer API'niz baÅŸka portlardan da eriÅŸim saÄŸlanacaksa bunu aÃ§mamÄ±z gerekiyor.
const cors = require("cors");
app.use(cors());
// Helmet: Http baÅŸlÄ±kalrÄ±nÄ± gÃ¼venli hale getirir ve yaygÄ±n saldÄ±rÄ± vektÃ¶rlerini azaltÄ±r
//npm install helmet
// const helmet = require("helmet");
//app.use(helmet());
app.use(helmet.frameguard({ action: "deny" })); // Clickjacking'e karÅŸÄ± koruma
app.use(helmet.xssFilter()); // XSS saldÄ±rÄ±larÄ±na karÅŸÄ± koruma
app.use(helmet.noSniff()); // MIME sniffing korumasÄ±
// CSRF
/*
CSRF (Cross-Site Request Forgery):  TÃ¼rkÃ§esi Siteler ArasÄ± istek SahteciliÄŸidir.
Bu saldÄ±rÄ± tÃ¼rÃ¼nde amaÃ§, kÃ¶tÃ¼ niyetli bir kullanÄ±cÄ±nÄ±n, baÅŸka bir kullanÄ±nÄ±n haberi olmadan onun adÄ±na istekler gÃ¶ndererek
iÅŸlem yapmasÄ± halidir.
KullanÄ±mÄ±: Genellikle kullanÄ±cÄ±, baÅŸka bir sitede oturum aÃ§mÄ±ÅŸken, saldÄ±rganÄ±n tasarladÄŸo kÃ¶tÃ¼ niyetli sitelerle veya baÄŸlantÄ±larla
istem dÄ±ÅŸÄ± iÅŸlemler yapmasÄ±na saldÄ±rgan yÃ¶nlendirir.
KullanÄ±cÄ± browser Ã¼zerinden oturum aÃ§tÄ±ÄŸÄ±nda ve kimlik doÄŸrulama bilgilerie sahip olduÄŸu sitelerde yapÄ±lÄ±r.

*/
// npm install csurf
// npm install cookie-parser
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC (Ts iÃ§in public dizini oluÅŸturduk)
// Uygulamada statik dosyalarÄ±n HTL,CSS,JS,image v.b iÃ§erikler sunar.
// public klasÃ¶rÃ¼, statik doyalar iÃ§in kÃ¶k dizin olarak belirlenir.
// Bu klasÃ¶rde bulunan dosyalara tarayÄ±cÄ±dan direk eriÅŸim saÄŸlanÄ±r.
// Ã–rnek: public klasÃ¶rÃ¼nde style.css adlÄ± bir dosya varsa biz buna ÅŸu ÅŸekilde eriÅŸim saÄŸlarÄ±z.
// http://localhost:1111/style.css
// app.use(express.static("public"));
// ğŸ“Œ Statik Dosya Servisi (index44.html'nin Ã§alÄ±ÅŸmasÄ± iÃ§in)
const path_1 = __importDefault(require("path"));
app.use(express.static(path_1.default.join(__dirname, "../public")));
// ğŸ“Œ Ana Sayfa (`index44.html`) YÃ¶nlendirmesi
app.get("/", (req, res) => {
    res.sendFile(path_1.default.join(__dirname, "public", "index.html"));
});
// Formu render eden rota ("/")
// Anasayfaya yÃ¶nlendir.
app.get("/blog/api", csrfProtection, (request, response) => __awaiter(void 0, void 0, void 0, function* () {
    // Ä°stek gÃ¶vdesinde JSON(Javascript Object Notation) formatÄ±nda veri gÃ¶ndereceÄŸini belirtir.
    //response.setHeader("Content-Type", "application/json");
    //response.setHeader("Content-Type", "text/plain"); // name Hamit surnameMÄ±zrak
    response.setHeader("Content-Type", "text/html");
    //response.setHeader("Content-Type", "application/x-www-form-urlencoded"); // name=Hamit&surname=Mizrak
    // cache-control: YanÄ±tlarÄ± hÄ±zlÄ± sunmak iÃ§in ve sunucya gereksiz istekleri azaltmak iÃ§in
    response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
    // Sitemizi baÅŸka sitelerde iframe ile aÃ§Ä±lmasÄ±nÄ± engellemek
    // clickjacking saldÄ±rÄ±larÄ±na karÅŸÄ± korumayÄ± saÄŸlar
    response.setHeader("X-Frame-Options", "DENY");
    // X-XSS-Protection: TarayÄ±ca tarafÄ±ndan XSS(Cross-Site Scripting) saldÄ±rÄ±larÄ±a karÅŸÄ± koruma
    // XSS saldÄ±rÄ±sÄ±nÄ± tespit ederse sayfanÄ±n yÃ¼klenmesini engeller.
    response.setHeader("X-XSS-Protection", "1; mode=block");
    // Access Control (CORS BaÅŸlÄ±klarÄ±)
    // XBaÅŸka bir kaynaktan gelen istekleri kontrol etmet iÃ§in CORS baÅŸlÄ±ÄŸÄ± ekleyebiliriz.
    response.setHeader("Access-Control-Allow-Origin", "https://example.com");
    // Access-Control-Allow-Methods
    // Sunucunun hangi HTTP yÃ¶ntemlerini kabul etiÄŸini gÃ¶sterir.
    response.setHeader("Access-Control-Allow-Methods", "GET, POST, PUT, PATCH, DELETE, OPTIONS");
    // Access-Control-Allow-Headers
    // Bu baÅŸlÄ±klar, taryÄ±cÄ±nÄ±nÄ±n sunucuya gÃ¶ndereceÄŸi Ã¶zel baÅŸlÄ±klar gÃ¶ndersin
    response.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
    // dist/server.js
    try {
        const BlogModel = require("../models/mongoose_blog_models"); // Modeli ekleyin
        const blogs = yield BlogModel.find(); // TÃ¼m blog verilerini al
        response.json(blogs); // JSON formatÄ±nda dÃ¶ndÃ¼r
    }
    catch (error) {
        console.error("Veri alÄ±nÄ±rken hata oluÅŸtu:", error);
        response.status(500).send("Veri alÄ±nÄ±rken hata oluÅŸtu.");
    }
}));
app.get("/blog", csrfProtection, (request, response) => {
    response.render("blog", { csrfToken: request.csrfToken() });
});
app.get("/register", csrfProtection, (request, response) => {
    response.render("register", { csrfToken: request.csrfToken() });
});
app.get("/register/api", csrfProtection, (request, response) => __awaiter(void 0, void 0, void 0, function* () {
    // dist/server.js
    try {
        const RegisterModel = require("../models/mongoose_blog_register_models"); // Modeli ekleyin
        const registers = yield RegisterModel.find(); // TÃ¼m register verilerini al
        response.setHeader("Content-Type", "application/json"); // YanÄ±tÄ±n JSON formatÄ±nda olduÄŸunu belirtir
        response.json(registers); // JSON formatÄ±nda dÃ¶ndÃ¼r
    }
    catch (error) {
        console.error("Veri alÄ±nÄ±rken hata oluÅŸtu:", error);
        response.status(500).send("Veri alÄ±nÄ±rken hata oluÅŸtu.");
    }
}));
// Form verilerini iÅŸleyen rota
// DÄ°KKATT: EÄŸer  blog_api_routes.js post kÄ±smÄ±nda event.preventDefault(); kapatÄ±rsam buraki kodlar Ã§alÄ±ÅŸÄ±r.
// blog iÃ§in CSRF korumasÄ± eklenmiÅŸ POST iÅŸlemi
// app.post("/blog", csrfProtection, (request, response) => {
app.post("/blog/api", csrfProtection, (request, response) => {
    const blogData = {
        header: request.body.header,
        content: request.body.content,
        author: request.body.author,
        tags: request.body.tags,
    };
    if (!blogData.header || !blogData.content) {
        return response.status(400).send("Blog verisi eksik!");
    }
    if (!request.body) {
        console.log("BoÅŸ gÃ¶vde alÄ±ndÄ±.");
        logger.info("BoÅŸ gÃ¶vde alÄ±ndÄ±."); //logger: Winston
    }
    else {
        console.log(request.body);
        console.log("Dolu gÃ¶vde alÄ±ndÄ±.");
        logger.info(request.body); //logger: Winston
        logger.info("Dolu gÃ¶vde alÄ±ndÄ±."); //logger: Winston
    }
    const BlogModel = require("../models/mongoose_blog_models"); // Modeli ekleyin
    const newBlog = new BlogModel(blogData);
    newBlog
        .save()
        .then(() => {
        console.log("Blog baÅŸarÄ±yla kaydedildi:", blogData);
        logger.info("Blog baÅŸarÄ±yla kaydedildi:", blogData); //logger: Winston
        response.send("CSRF ile blog baÅŸarÄ±yla kaydedildi.");
    })
        .catch((err) => {
        console.log("VeritabanÄ± hatasÄ±:", err);
        logger.error("VeritabanÄ± hatasÄ±:", err); //logger: Winston
        response.status(500).send("VeritabanÄ± hatasÄ± oluÅŸtu.");
    });
});
app.post("/register/api", csrfProtection, (request, response) => __awaiter(void 0, void 0, void 0, function* () {
    const registerData = {
        username: request.body.username,
        password: request.body.password,
        email: request.body.email,
    };
    if (!registerData.username || !registerData.password) {
        return response.status(400).send("register verisi eksik!");
    }
    if (!request.body) {
        console.log("BoÅŸ gÃ¶vde alÄ±ndÄ±.");
        logger.info("BoÅŸ gÃ¶vde alÄ±ndÄ±."); //logger: Winston
    }
    else {
        console.log(request.body);
        console.log("Dolu gÃ¶vde alÄ±ndÄ±.");
        logger.info(request.body); //logger: Winston
        logger.info("Dolu gÃ¶vde alÄ±ndÄ±."); //logger: Winston
    }
    const RegisterModel = require("../models/mongoose_blog_register_models"); // Modeli ekleyin
    const newRegister = new RegisterModel(registerData);
    newRegister
        .save()
        .then(() => {
        console.log("register baÅŸarÄ±yla kaydedildi:", registerData);
        logger.info("register baÅŸarÄ±yla kaydedildi:", registerData); //logger: Winston
        response.send("CSRF ile blog baÅŸarÄ±yla kaydedildi.");
    })
        .catch((err) => {
        console.log("VeritabanÄ± hatasÄ±:", err);
        logger.error("VeritabanÄ± hatasÄ±:", err); //logger: Winston
        response.status(500).send("VeritabanÄ± hatasÄ± oluÅŸtu.");
    });
}));
app.delete("/register/api/:id", csrfProtection, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { id } = req.params;
        const RegisterModel = require("../models/mongoose_blog_register_models");
        yield RegisterModel.findByIdAndDelete(id);
        res.status(200).send("KullanÄ±cÄ± silindi");
    }
    catch (error) {
        console.error("Silme hatasÄ±:", error);
        res.status(500).send("Silme iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu");
    }
}));
// KullanÄ±cÄ± gÃ¼ncelleme iÅŸlemi
app.put("/register/api/:id", csrfProtection, (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { id } = req.params;
        const { username, password, email } = req.body;
        const RegisterModel = require("../models/mongoose_blog_register_models");
        const updateData = { username, password, email };
        const updatedUser = yield RegisterModel.findByIdAndUpdate(id, updateData, { new: true });
        if (!updatedUser) {
            return res.status(404).send("KullanÄ±cÄ± bulunamadÄ±");
        }
        res.status(200).send("KullanÄ±cÄ± baÅŸarÄ±yla gÃ¼ncellendi");
    }
    catch (error) {
        console.error("GÃ¼ncelleme hatasÄ±:", error);
        res.status(500).send("GÃ¼ncelleme iÅŸlemi sÄ±rasÄ±nda hata oluÅŸtu");
    }
}));
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EJS(Embedded JavaScript) GÃ¶rÃ¼ntÃ¼leme motorunu aktifleÅŸtirdim
// views/blog.ejs aktifleÅŸtirmek
app.set("view engine", "ejs");
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Router (Rotalar)
const blogRoutes = require("../routes/blog_api_routes");
const registerRoutes = require("../routes/blog_register_routes");
const { request } = require("http");
// http://localhost:1111/blog
app.use("/blog/", blogRoutes);
app.use("/register/", registerRoutes);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 404 Hata sayfasÄ±
app.use((request, response, next) => {
    response.status(404).render("404", { url: request.originalUrl });
});
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Windowsta 1111 portunu kapatmak
/*
Terminali YÃ¶netici olarak AÃ§

# Ã‡alÄ±ÅŸan portu gÃ¶steriyor
netstat -aon | findstr :1111

# TCP ProtokolÃ¼ iÃ§in Portu Kapatma:
netsh advfirewall firewall add rule name="Block TCP Port 1111" protocol=TCP dir=in localport=1111 action=block

# UDP ProtokolÃ¼ iÃ§in Portu Kapatma:
netsh advfirewall firewall add rule name="Block UDP Port 1111" protocol=UDP dir=in localport=1111 action=block

*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sunucu baÅŸlatma
const PORT = process.env.LOCALHOST_PORT || 1111;
app.listen(PORT, () => {
    console.log(`Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor http://localhost:${PORT}`);
    logger.info(`Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor http://localhost:${PORT}`); //logger: Winston
});
